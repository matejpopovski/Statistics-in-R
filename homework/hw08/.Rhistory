knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE, fig.height = 3)
library(tidyverse)
library(kableExtra)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
# Parameters
n <- 150
p <- 0.4
# Mean
mean <- n * p
mean
# Standard Deviation
sd <- sqrt(n * p * (1 - p))
sd
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE, fig.height = 3)
library(tidyverse)
library(kableExtra)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
# Parameters
n <- 150
p <- 0.4
# Mean
mean <- n * p
mean
# Standard Deviation
sd <- sqrt(n * p * (1 - p))
sd
# Probability X = 70
prob_X_70 <- dbinom(70, size = n, prob = p)
prob_X_70
# Probability X >= 70
prob_X_ge_70 <- 1 - pbinom(69, size = n, prob = p)
prob_X_ge_70
# Generate x values
x <- 0:n
# Calculate probabilities for each x
probs <- dbinom(x, size = n, prob = p)
# Plot the distribution
barplot(probs, names.arg = x, xlab = "X", ylab = "Probability", col = "skyblue", main = "Binomial Distribution")
# Add vertical lines at mean and specified standard deviations
abline(v = mean, col = "red", lty = 2)  # Mean
abline(v = mean - sd, col = "red", lty = 3)  # 1 SD below mean
abline(v = mean + sd, col = "red", lty = 3)  # 1 SD above mean
abline(v = mean - 2*sd, col = "red", lty = 3)  # 2 SD below mean
abline(v = mean + 2*sd, col = "red", lty = 3)  # 2 SD above mean
abline(v = mean - 3*sd, col = "red", lty = 3)  # 3 SD below mean
abline(v = mean + 3*sd, col = "red", lty = 3)  # 3 SD above mean
# Probability X within 1 standard deviation of mean
prob_within_1_sd <- pbinom(mean + sd, size = n, prob = p) - pbinom(mean - sd - 1, size = n, prob = p)
round(prob_within_1_sd, 4)
# Probability X within 2 standard deviations of mean
prob_within_2_sd <- pbinom(mean + 2*sd, size = n, prob = p) - pbinom(mean - 2*sd - 1, size = n, prob = p)
round(prob_within_2_sd, 4)
# Probability X within 3 standard deviations of mean
prob_within_3_sd <- pbinom(mean + 3*sd, size = n, prob = p) - pbinom(mean - 3*sd - 1, size = n, prob = p)
round(prob_within_3_sd, 4)
# Calculate the 0.4 quantile
quantile_04 <- qbinom(0.4, size = 7, prob = 0.3)
quantile_04
# Determine the 0.75 quantile from the graph (approximate)
quantile_075_graph <- 2  # Approximately from the graph
# Verify the 0.75 quantile with calculation
quantile_075_calc <- qbinom(0.75, size = 7, prob = 0.3)
quantile_075_calc
# Parameters
p <- 0.52  # Proportion of voters planning to vote for candidate A
n <- 750   # Sample size
# Calculate mean and standard deviation of sampling distribution of sample proportion
mu <- p
sigma <- sqrt(p * (1 - p) / n)
# Calculate z-score for sample proportion of 50%
z_score <- (0.5 - mu) / sigma
# Calculate probability using standard normal distribution
prob_less_than_50_percent <- pnorm(z_score)
prob_less_than_50_percent
# Create n and p vectors
n <- seq(10, 1000, by = 10)
p <- rep(0.7, length(n))
# Calculate mu and sigma
mu <- n * p
sigma <- sqrt(n * p * (1 - p))
# Calculate q90
q90 <- qbinom(0.9, size = n, prob = p)
# Calculate prob_1
prob_1 <- pbinom(mu + 10, size = n, prob = p) - pbinom(mu - 10 - 1, size = n, prob = p)
# Calculate prob_2
prob_2 <- pbinom(0.71 * n, size = n, prob = p) - pbinom(0.69 * n - 1, size = n, prob = p)
# Create the data frame
binomial_df <- data.frame(n, p, mu, sigma, q90, prob_1, prob_2)
# Print the first 20 rows
head(binomial_df, 20)
# Plot of q90 versus n
ggplot(binomial_df, aes(x = n, y = q90)) +
geom_line(color = "blue") +
xlab("n") +
ylab("q90") +
ggtitle("90th Percentile vs. n") +
theme_minimal()
# Plot of prob_1 versus n
ggplot(binomial_df, aes(x = n, y = prob_1)) +
geom_line(color = "green") +
xlab("n") +
ylab("Probability") +
ggtitle("Probability of being within 10 of the mean vs. n") +
theme_minimal()
# Plot of prob_2 versus n
ggplot(binomial_df, aes(x = n, y = prob_2)) +
geom_line(color = "purple") +
xlab("n") +
ylab("Probability") +
ggtitle("Probability of sample proportion within 0.01 of p vs. n") +
theme_minimal()
# Parameters
mu <- 200
sigma <- 40
# Generate x values
x <- seq(mu - 4*sigma, mu + 4*sigma, length.out = 1000)
# Calculate the normal density
density <- dnorm(x, mean = mu, sd = sigma)
# Plot the normal distribution
plot(x, density, type = "l", xlab = "X", ylab = "Density", main = "Normal Distribution N(200, 40)")
# Probability X > 250
prob_X_gt_250 <- 1 - pnorm(250, mean = mu, sd = sigma)
# Graph with shaded area for X > 250
plot(x, density, type = "l", xlab = "X", ylab = "Density", main = "Normal Distribution N(200, 40)")
x_shaded <- seq(250, mu + 4*sigma, length.out = 1000)
y_shaded <- dnorm(x_shaded, mean = mu, sd = sigma)
polygon(c(x_shaded, rev(x_shaded)), c(rep(0, length(x_shaded)), rev(y_shaded)), col = "skyblue")
# Standardize X = 250
z_score <- (250 - mu) / sigma
# Find z such that P(Z > z) = P(X > 250)
z_for_X_gt_250 <- qnorm(prob_X_gt_250)
z_for_X_gt_250
# Probability of X within a certain range
target_prob <- 0.70
# Find 'a' such that P(200 - a < X < 200 + a) = 0.70
a <- qnorm((1 + target_prob) / 2, mean = mu, sd = sigma) - mu
a
# Graph with shaded area for the interval
plot(x, density, type = "l", xlab = "X", ylab = "Density", main = "Normal Distribution N(200, 40)")
x_shaded <- seq(mu - a, mu + a, length.out = 1000)
y_shaded <- dnorm(x_shaded, mean = mu, sd = sigma)
polygon(c(x_shaded, rev(x_shaded)), c(rep(0, length(x_shaded)), rev(y_shaded)), col = "skyblue")
# Parameters
mu <- 145.25
sigma <- 18.51
# Probability of total points scored 160 or more
prob_gt_160 <- 1 - pnorm(159.5, mean = mu, sd = sigma)
prob_gt_160
# Sample size
n <- 10
# Adjusted mean for sample mean
mu_sample <- mu
# Adjusted standard deviation for sample mean
sigma_sample <- sigma / sqrt(n)
# Probability of sample mean more than 160
prob_sample_mean_gt_160 <- 1 - pnorm(160, mean = mu_sample, sd = sigma_sample)
prob_sample_mean_gt_160
# Parameters
mu <- 145.25
sigma <- 18.51
# Probability of total score of a random game being 'a' or higher
prob_a_or_higher <- 0.10
# Find 'a' using the quantile function
a <- qnorm(1 - prob_a_or_higher, mean = mu, sd = sigma)
a
